/*
  7 - Readonly
  -------
  by Anthony Fu (@antfu) #easy #built-in #readonly #object-keys
  
  ### Question
  
  Implement the built-in `Readonly<T>` generic without using it.
  
  Constructs a type with all properties of T set to readonly, meaning the properties of the constructed type cannot be reassigned.
  
  For example:
  
  ```ts
  interface Todo {
    title: string
    description: string
  }
  
  const todo: MyReadonly<Todo> = {
    title: "Hey",
    description: "foobar"
  }
  
  todo.title = "Hello" // Error: cannot reassign a readonly property
  todo.description = "barFoo" // Error: cannot reassign a readonly property
  ```
  
  > View on GitHub: https://tsch.js.org/7
*/


/* _____________ Your Code Here _____________ */

type MyReadonly<T> = {
  readonly[E in keyof T]: T[E];
}

/* _____________ Test Cases _____________ */
import type { Equal, Expect } from '@type-challenges/utils'

type cases = [
  Expect<Equal<MyReadonly<Todo1>, Readonly<Todo1>>>,
]

interface Todo1 {
  title: string
  description: string
  completed: boolean
  meta: {
    author: string
  }
}

interface Todo {
  title: string
  description: string
}
const todo: MyReadonly<Todo> = {
  title: "Hey",
  description: "foobar"
}

// todo.title = "Hello" // Error: cannot reassign a readonly property
// todo.description = "barFoo" // Error: cannot reassign a readonly property



/* _____________ Further Steps _____________ */
/*
  > Share your solutions: https://tsch.js.org/7/answer
  > View solutions: https://tsch.js.org/7/solutions
  > More Challenges: https://tsch.js.org
*/

/* _____________ Î¨∏Ï†ú Ìï¥Í≤∞ Í≥ºÏ†ï _____________ */
/*
    type MyReadonly<T> = {
      readonly[E in keyof T]: T[E];
    }
    tsÏùò Ïú†Ìã∏Î¶¨Ìã∞ ÌÉÄÏûÖ Ï§ë ReadonlyÎ•º ÏßÅÏ†ë ÎßåÎì§Ïñ¥Î≥¥Îäî Î¨∏Ï†úÏòÄÎã§.
    Ïö∞ÏÑ† Ï†úÎÑ§Î¶≠ÏúºÎ°ú ÏÑ†Ïñ∏Ìïú T ÌÉÄÏûÖÏóê ÎåÄÌï¥ keyÎ•º ÌïòÎÇòÏî© ÎèåÎ©¥ÏÑú readonlyÎ°ú Ï†ïÏùòÌï¥Ï§òÏïºÍ≤†Îã§Îäî ÏÉùÍ∞ÅÏù¥ Îì§ÏóàÎã§. 
    ÏßÄÎÇúÎ≤à Pick Íµ¨ÌòÑ Î¨∏Ï†úÎ•º ÌíÄÎ©¥ÏÑú 'Mapped Types'Î•º ÏÇ¨Ïö©ÌïòÎ©¥ ÌÉÄÏûÖÏóê ÎåÄÌïú keyÎ•º ÌïòÎÇòÏî© Îèå Ïàò ÏûàÎã§Îäî Í≤ÉÏùÑ ÏïåÍ≤å ÎêòÏóàÎã§. 
    Ïó¨Í∏∞ÏÑú Îçî ÎÇòÏïÑÍ∞ÄÏÑú [E in keyof T]: T[E] Î°ú ÏΩîÎìúÎ•º ÏûëÏÑ±ÌïòÎ©¥ TÏùò keyÎì§ÏùÑ ÎèåÎ©¥ÏÑú ÎπºÎÇ∏ EÎùºÎäî ÌîÑÎ°úÌçºÌã∞ÏôÄ, Í∑∏ ÌîÑÎ°úÌçºÌã∞Ïóê ÎåÄÌïú ÌÉÄÏûÖÏù∏ T[E]ÍπåÏßÄ ÎπºÎÇº Ïàò ÏûàÎã§Îäî Í≤ÉÏùÑ Í≥µÏãù Î¨∏ÏÑúÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏóàÎã§. 
    Í∑∏Î¶¨Í≥† readonlyÎ•º Í∑∏ ÏïûÏóê Î∂ôÏó¨Ï£ºÎ©¥ Ìï¥Îãπ ÌÉÄÏûÖÏóê ÎåÄÌï¥ readonly ÏùΩÍ∏∞ Ï†ÑÏö© ÌÉÄÏûÖÏúºÎ°ú ÏßÄÏ†ïÌï† Ïàò ÏûàÏùåÏùÑ ÏûêÎ£åÎ•º Ï∞∏Í≥†Ìï¥ Ïïå Ïàò ÏûàÏóàÎã§. Ïù¥Î•º Ï°∞Ìï©ÌñàÏùÑ Îïå ÏúÑÏôÄ Í∞ôÏù¥ ÌíÄÏù¥Ìï† Ïàò ÏûàÏóàÎã§.
    
    Ï∞∏Í≥†Ìïú ÏûêÎ£å
    üìÑ TS Í≥µÏãùÎ¨∏ÏÑú > Utility Types > Readonly<Type> : https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype
    üìÑ TS Í≥µÏãùÎ¨∏ÏÑú > Mapped Types > Mapping Modifiers : https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#mapping-modifiers
    üìÑ TypeScript Deep Dive > ÏùΩÍ∏∞ Ï†ÑÏö©(readonly) > Ìé∏Î¶¨Ìïú Î∂àÎ≥ÄÏÑ± ÏßÄÏõê : https://radlohead.gitbook.io/typescript-deep-dive/type-system/readonly#undefined-1
*/
